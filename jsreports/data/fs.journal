{"operation":"insert","timestamp":{"$$date":1708601616238},"version":1166,"doc":{"_id":"aKixtQevMGis1gnr","timestamp":{"$$date":1708601616228},"state":"queued","mode":"standard","creationDate":{"$$date":1708601616229},"modificationDate":{"$$date":1708601616229},"shortid":"Jx-UMSz","$entitySet":"profiles"}}
{"operation":"update","timestamp":{"$$date":1708601616244},"version":1167,"doc":{"_id":"aKixtQevMGis1gnr","timestamp":{"$$date":1708601616228},"state":"running","mode":"standard","creationDate":{"$$date":1708601616229},"modificationDate":{"$$date":1708601616242},"shortid":"Jx-UMSz","$entitySet":"profiles","$$etag":1708601616244,"timeout":60000,"templateShortid":"ZWQR_BxAk"}}
{"operation":"update","timestamp":{"$$date":1708601617697},"version":1168,"doc":{"_id":"aKixtQevMGis1gnr","timestamp":{"$$date":1708601616228},"state":"success","mode":"standard","creationDate":{"$$date":1708601616229},"modificationDate":{"$$date":1708601617695},"shortid":"Jx-UMSz","$entitySet":"profiles","$$etag":1708601617697,"timeout":60000,"templateShortid":"ZWQR_BxAk","finishedOn":{"$$date":1708601617695},"blobName":"profiles/TibuTicket/TemplateCalc/uejo0zw8xcaomya.log"}}
{"operation":"update","timestamp":{"$$date":1708601684175},"version":1169,"doc":{"name":"list-data","scope":"template","shortid":"6v8QPG_9N3","creationDate":{"$$date":1708446173810},"modificationDate":{"$$date":1708601684167},"_id":"3U0sxBCirkc6skf1","$entitySet":"scripts","content":"const nodemailer = require('nodemailer');\nconst http = require('http');\n\nasync function fetchlists() {\n    const options = {\n        hostname: 'localhost',\n        port: 4000,\n        path: '/api/v1/lists',\n        method: 'GET',\n    };\n\n    return new Promise((resolve, reject) => {\n        const req = http.request(options, (result) => {\n            let str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str)));\n        });\n\n        req.end();\n    });\n}\n\nasync function fetchusers() {\n    const options = {\n        hostname: 'localhost',\n        port: 4000,\n        path: '/api/v1/users/users',\n        method: 'GET',\n    };\n\n    return new Promise((resolve, reject) => {\n        const req = http.request(options, (result) => {\n            let str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str)));\n        });\n\n        req.end();\n    });\n}\n\nasync function beforeRender(req, res) {\n    try {\n        req.data.lists = await fetchlists();\n        console.log(req.data.lists);\n    } catch (error) {\n        console.error('Error fetching lists:', error);\n    }\n\n    try {\n        req.data.users = await fetchusers();\n        console.log(req.data.users);\n    } catch (error) {\n        console.error('Error fetching users:', error);\n    }\n}\n\nfunction afterRender(req, res) {\n  const transport = nodemailer.createTransport({\n    host: 'sandbox.smtp.mailtrap.io',\n    port: 2525,\n    auth: {\n      user: '79e32bd0362e26',\n      pass: '5cb77dc70b96ea',\n    },\n  });\n\n  const mailOptions = {\n    from: 'tibuticket@example.com',\n    to: req.data.email,\n    subject: 'Informe generado',\n    text: 'Adjunto encontrarás el informe en formato PDF.',\n    attachments: [\n      {\n        filename: 'informe.pdf',\n        content: res.content,\n        encoding: 'base64',\n        },\n    ],\n  };\n  transport.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      console.error('Error al enviar el correo electrónico:', error);\n    } else {\n      console.log('Correo electrónico enviado con éxito:', info.response);\n    }\n  });\n}\n","folder":{"shortid":"yI1Jhn0"},"$$etag":1708601684175}}
